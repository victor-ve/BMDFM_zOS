# dftest_prep.flp
# Refer to the BMDFM comprehensive manual for more information.


# This program prepares an input test file that contains multiple data
# clusters:
#
# <SequenceId><TrailingSpaces>                ^
# <RecordsPerDataCluster><TrailingSpaces>     |R
# AOJJYPICIMGNENDSADMMPABZLALVZFNAUWJSLSV  ^  |e
# UFCIJPLCPPPCFQDEBDQWDWJDQFNJRFELKHTUWFX  |R |c
# MVNOADSFEWVBZRKCIQPRHVWTGDNAZSYMOLAPPTU  |e |o
# TPQVOIFQQWGHEBEXHHKIHDGTRSUGHNBBCSWQACH  |c |r
# RZOZDPDAXKKGRONKFFEMNSNPUGMLGOSXNGXRWAR  |o |d
# ULCACQNNWTSIHKWWFCIQJXIGLPECLEUFPWGSNUG  |r |s
# JNYRVJORPQAFZYOGKDKMPPHVFEBXRVDAJCSEMGW  |d |P
# BXWGXVUEFYPSOEZJJDLHUHLVQNNVZURBROHOJCT  |s |e
# PBIHPNGZWKKEERPZICNECHVDZKLNUOHJPPQFCXE  |P |r
# ZHPDMGTMPWZTYGPCFZOTUCBDSQUXSSCSZRVMYPY  |e |D
# NLXGJEWMKWAEQDFUWWPTOHWHHNDTMSRZDPGNTDZ  |r |a
# EZAJPDOKZKZTZGQHNEKGQCYQFNXSHASMZSVPWJZ  |D |t
# VUYPUFFBSJLZAOYQTLOMTOEFOXADTKDPFBEZGKA  |a |a
# ZUMZUAXLUJZGCOLICIIGCTJRYKWXRHYRBLQWMNI  |t |C
# GWHNZWZHYIPEKJNBHYYFQFEHHPXDBKMIHUWGQVN  |a |l
# ODDTNMHPUFNZWSDDZTBDVLPETJAZAVMOYPIMCPB  |C |u
# WVOWRHAVGUWKPIATBKTAKPNZNDHAFWBCSQZJXZF  |l |s
# ETBOJKPCMZWMJLAJZDQZJNBMGRLPOKVSEXHNHXQ  |u |t
# TWNGGYGPYKGYTUZGAQRQFBLYFIFTQCJKZWQGVXV  |s |e
# UHCSBXSHXIYOOAZMGISAZVJJUGZACXWXFZQGWIO  |t |r
# URNIFOIRUQJUPEEYZLYAOWXLBWBITKXNBKVGYEY  |e |+
# TUIOKNTJMFINTEKFFHHOARLOSVKZUOYOJGCTTWC  |r |2
#
# <------------- RecordSize ------------->


(progn
  # Configuration parameters:
  (setq RecordSize                                40)
  (setq MaxRecordsPerDataCluster               10000)
  (setq NumberOfDataClusters                    1000)
  (setq OutputTestFileName           "dftest_in.dat")

  # Sanity checks:
  (setq OutputTestFileName (cat OutputTestFileName
    (if (at "." OutputTestFileName) "" ".dat")))
  (setq OutputTestFileName (strtran OutputTestFileName "."
    (cat (if (id_taskjob) (str (id_taskjob)) "") ".")))
  (if (== -1 (setq fdescr (file_create OutputTestFileName)))
    (progn
      (outf "Error creating file %s\n" OutputTestFileName)
      (exit)
    )
    (setq fdescr (file_close fdescr))
  )
  (if (< RecordSize 40)
    (setq RecordSize 40)
    nil
  )
  (if (< MaxRecordsPerDataCluster 100)
    (setq MaxRecordsPerDataCluster 100)
    nil
  )
  (if (< NumberOfDataClusters 100)
    (setq NumberOfDataClusters 100)
    nil
  )

  # Processing begins here:
  (irnd -1)  # reset random number generator
  (setq OutputTestFileOrdering_sync fdescr)

  # main processing for-loop
  # for(SequenceId=1;SequenceId<=NumberOfDataClusters;SequenceId++){
  (for SequenceId 1 1 NumberOfDataClusters (progn

    (outf "Writing data to cluster %ld\n" SequenceId)

    (setq RecordsPerDataCluster (irnd MaxRecordsPerDataCluster))
    (setq DataClusterSize (* RecordSize (+ RecordsPerDataCluster 2)))

    (setq DataClusterInMemory_ptr
      (asyncheap_create DataClusterSize)  # allocate memory with malloc()
    )

    # We re-assign DataClusterInMemory_ptr in order to prevent the situation
    # where a dataflow engine might call e.g. asyncheap_delete earlier than
    # needed.

    (setq DataClusterInMemory_ptr
      (write_data_to_cluster DataClusterInMemory_ptr
                             SequenceId
                             RecordsPerDataCluster
                             RecordSize)
    )

    # We re-assign OutputTestFileOrdering_sync in order to prevent the situation
    # where a dataflow engine might create an out-of-order output.

    (setq OutputTestFileOrdering_sync (setq DataClusterInMemory_ptr
      (write_cluster_to_file DataClusterInMemory_ptr
                             DataClusterSize
                             OutputTestFileName
                             OutputTestFileOrdering_sync)
    ))

    (asyncheap_delete DataClusterInMemory_ptr)  # free memory with free()

  )) # } end main processing for-loop

  # Processing ends here:
  (space (& 0 OutputTestFileOrdering_sync))
)

# <EOF>


# BMDFMsrv.cfg

################################################
##                                            ##
##          Configuration Profile             ##
##                                            ##
##  "Broken Mind" Data-Flow Machine (BM_DFM)  ##
##                                            ##
################################################


##### Section of the global BM_DFM parameters: #####

SHMEM_POOL_SIZE    =1000000000 # Shared memory pool size            [Bytes]
SHMEM_POOL_MNTADDR =2000000000 # ShMemPool mount address (0=auto)
SHMEM_POOL_PERMS   =      432 # ShMemPool permissions (0660=="rw-rw----")
SHMEM_POOL_BANKS   =       10 # Number of banks in pool
POSIX_SEMA4_SYNC   = RW+Count # Replace None/RW/RW+Count SVR4 with POSIX sema4
ARRAYBLOCK_SIZE    =       64 # Array block size                   [Entities]
OQ_FUNC_ARG_COUNT  =       32 # OQ function argument count         [Entities]

Q_OQ               =     1000 # Operation Queue (OQ) size          [Entities]
Q_DB               =      500 # Data Buffer (DB) size              [Entities]
Q_IORBP            =      100 # I/O Ring Buffer Port (IORBP) size  [Entities]
N_IORBP            =       10 # Number of the IORBPs
N_TRACEPORT        =        5 # Number of the Trace Ports (TPs)

N_CPUPROC          =        8 # Number of the CPU PROCs
N_OQPROC           =        8 # Number of the OQ PROCs
N_IORBPPROC        =        8 # Number of the IORBP PROCs

CPUPROC_MTHREAD    =       No # CPU PROC is multithreaded
OQPROC_MTHREAD     =       No # OQ PROC is multithreaded
IORBPPROC_MTHREAD  =       No # IORBP PROC is multithreaded
BMDFMLDR_MTHREAD   =       No # BMDFMldr is multithreaded

MTHREAD_TLS_CHECK  =       No # Check for Thread-Local Storage (TLS)
ALLOW_CPUPROC_ASLR =       No # Allow Address Space Layout Randomization (ASLR)

T_STATISTIC        =        1 # Time to scan DFM for statistic     [Seconds]
CONSOLE_OUT_UTF8   =       No # Adjust console output for ASCII or UTF8
PROC_HEARTBEATS    =      Yes # Heartbeats for the CPU, OQ && IORBP PROCs
DFSTLHAZARD_DETECT =      Yes # Detection of dataflow stall hazards
ALLOW_DROP_NONPROD =       No # Allow dropping nonproductive instructions
PROC_CPU_LOGS      =       No # Logs registration for the CPU && IORBP PROCs
HARD_ARRAY_SYNCHRO =       No # Hard synchronization of the arrays
EXT_IN_OUT_SYNCHRO =      Yes # I/O synchronization of external task
OQ_DB_SEM_LIMIT    =        0 # Max number of OQ&&DB semaphores (0=unlim.)

RELAXED_CNSTN_SM_MODEL =  Yes # Compensate ShMem relaxed consistency

LICENSE_FILE       = BMDFMreg.inf

##### Section of the Global FastLisp Function Definitions: #####

# Format is: DEFOP = <(DEFUN ...)>{ <(DEFUN ...)>}  # <EOF>

DEFOP = (defun all+      # DFM global FastLisp functions
          (if (== (type $1) "S")
            (cat $1 $2)
            (if (== (type $1) "I")
              (iadd $1 $2)
              (fadd $1 $2)
            )
          )
        )
        (defun max_int
          (progn
            (setq max_int (setq ahead 1))
            (while (> ahead 0) (progn
              (setq max_int ahead)
              (setq ahead (++ (<< ahead 1)))
            ))
            max_int
          )
        )
        (defun +complex
          (progn
            (alsetq first_cmplx $1)
            (alsetq second_cmplx $2)
            (arsetq first_cmplx 0 (+ (index first_cmplx 0)     # Real part
                                     (index second_cmplx 0)))
            (arsetq first_cmplx 1 (+ (index first_cmplx 1)     # Imaginary part
                                     (index second_cmplx 1)))
            first_cmplx
          )
        )
        (defun min
          (if (< $1 $2) $1 $2)
        )
        (defun max
          (if (> $1 $2) $1 $2)
        )
        (defun ifact
          (if (<= $1 1)
            1
            (imul $1 (ifact (idecr $1)))
          )
        )
        (defun ftg
          (fdiv (fsin $1) (fcos $1))
        )
        (defun flog
          (fdiv (fln $2) (fln $1))
        )
        (defun flog1
          (if (== $2 1.)
            0.
            (progn
              (setq res (ln (fabs $1)))
              (if (== res 0.)
                (ln 0.)
                (progn
                  (setq res (/. (ln (fabs $2)) res))
                  (if (|| (< $1 0.) (< $2 0.))
                    (if (&& (== (fint res) res)
                       (< (fabs (-. (fpow $1 res) $2)) 1e-15))
                      res
                      (ln 0.)
                    )
                    res
                  )
                )
              )
            )
          )
        )
        (defun ffact
          (if (<= $1 1.)
            1.
            (fmul $1 (ffact (fsub $1 1)))
          )
        )
        (defun concat_list
          (progn
            (alsetq head_list $1)
            (alsetq tail_list $2)
            (setq howmany_in_headlist (ival (index head_list 0)))
            (setq howmany_in_taillist (ival (index tail_list 0)))
            (for i 1 1 howmany_in_taillist
              (arsetq head_list (iadd i howmany_in_headlist) (index tail_list
                i))
            )
            (arsetq head_list 0 (iadd howmany_in_headlist howmany_in_taillist))
            head_list
          )
        )
        (defun format_list_4print
          (progn
            (alsetq list $1)
            (setq howmany_in_list (ival (index list 0)))
            (setq form_string "")
            (for i 1 1 howmany_in_list (progn
              (setq member (index list i))
              (if (> (indices member) 1)
                (setq form_string (cat form_string (format_list_4print
                  member)))
                (if (== (type member) "S")
                  (progn
                    (setq form_string (cat form_string "\""))
                    (setq form_string (cat form_string (str_unraw member)))
                    (setq form_string (cat form_string "\""))
                  )
                  (setq form_string (cat form_string member))
                )
              )
              (setq form_string (cat form_string " "))
            ))
            (setq form_string (leftr form_string 1))
            (cat (cat "(" form_string) ")")
          )
        )
        (defun fastlisp
          (progn
            (alsetq ran (mapcar $1))
            (setq output (index ran 0))
            (if (index ran 2)
              (cat output (cat (str_fmt "[Syntax error %ld]: " (index ran 2))
                (index ran 3)))
              (if (index ran 4)
                (cat output (cat (str_fmt "[Run-time error %ld]: " (index ran
                  4)) (index ran 5)))
                (progn
                  (alsetq res (index ran 1))
                  (if (> (indices res) 1)
                    (cat output (format_list_4print res))
                    (cat output (cat "" res))
                  )
                )
              )
            )
          )
        )
        (defun get_file
          (progn
            (setq flp (cat     " (setq file_name \"" (cat $1 "\")         ")))
            (setq flp (cat flp " (if (== (setq file_descriptor (file_open "))
            (setq flp (cat flp "    file_name)) -1)                       "))
            (setq flp (cat flp "   (cat \"*** Error while opening the `\" "))
            (setq flp (cat flp "     (cat file_name \"' file!\"))         "))
            (setq flp (cat flp "   (progn                                 "))
            (setq flp (cat flp "     (setq contents \"\")                 "))
            (setq flp (cat flp "     (while (> (len (setq get_string      "))
            (setq flp (cat flp "        (file_read file_descriptor 1024)) "))
            (setq flp (cat flp "        ) 0)                              "))
            (setq flp (cat flp "       (setq contents (cat contents       "))
            (setq flp (cat flp "         get_string))                     "))
            (setq flp (cat flp "     )                                    "))
            (setq flp (cat flp "     (file_close file_descriptor)         "))
            (setq flp (cat flp "     contents                             "))
            (setq flp (cat flp "   )                                      "))
            (setq flp (cat flp " )                                        "))
            (fastlisp flp)
          )
        )

        (defun clean_screen   # To be invoked from BM_DFM Server console only!
          (progn
            (for i 1 1 (lines_term)
              (outf "\n" 0)
            )
            ""
          )
        )
        (defun signature
          (progn
            (setq s "\0x0A\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20")
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x54\0x68\0x65\0x20\0x42\0x4D\0x5F\0x44\0x46"))
            (setq s (cat s "\0x4D\0x20\0x70\0x72\0x6F\0x6A\0x65\0x63\0x74"))
            (setq s (cat s "\0x20\0x70\0x72\0x6F\0x76\0x69\0x64\0x65\0x73"))
            (setq s (cat s "\0x20\0x6D\0x79\0x20\0x70\0x65\0x72\0x73\0x6F"))
            (setq s (cat s "\0x6E\0x61\0x6C\0x0A\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x70\0x6F"))
            (setq s (cat s "\0x69\0x6E\0x74\0x20\0x6F\0x66\0x20\0x76\0x69"))
            (setq s (cat s "\0x65\0x77\0x20\0x6F\0x6E\0x20\0x70\0x61\0x72"))
            (setq s (cat s "\0x61\0x6C\0x6C\0x65\0x6C\0x20\0x70\0x72\0x6F"))
            (setq s (cat s "\0x63\0x65\0x73\0x73\0x69\0x6E\0x67\0x2E\0x0A"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x49\0x20\0x64\0x6F\0x20\0x70\0x72\0x65\0x66"))
            (setq s (cat s "\0x65\0x72\0x20\0x74\0x6F\0x20\0x65\0x78\0x70"))
            (setq s (cat s "\0x72\0x65\0x73\0x73\0x20\0x69\0x74\0x20\0x69"))
            (setq s (cat s "\0x6E\0x20\0x43\0x20\0x61\0x6E\0x64\0x20\0x4C"))
            (setq s (cat s "\0x49\0x53\0x50\0x2E\0x0A\0x0A\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x4F\0x6C"))
            (setq s (cat s "\0x65\0x6B\0x73\0x61\0x6E\0x64\0x72\0x20\0x50"))
            (setq s (cat s "\0x6F\0x63\0x68\0x61\0x79\0x65\0x76\0x65\0x74"))
            (setq s (cat s "\0x73\0x0A\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20\0x20"))
            (setq s (cat s "\0x20\0x20\0x20\0x20\0x20\0x28\0x61\0x6B\0x61"))
            (setq s (cat s "\0x20\0x53\0x61\0x6E\0x63\0x68\0x6F\0x20\0x4D"))
            (setq s (cat s "\0x69\0x6E\0x69\0x6E\0x67\0x29\0x0A\0x0A\0x53"))
            (setq s (cat s "\0x69\0x67\0x6E\0x61\0x74\0x75\0x72\0x65\0x20"))
            (setq s (cat s "\0x63\0x6F\0x6E\0x74\0x72\0x6F\0x6C\0x20\0x66"))
            (setq s (cat s "\0x6C\0x6F\0x77\0x20\0x66\0x6F\0x72\0x20\0x63"))
            (setq s (cat s "\0x63\0x3A\0x0A\0x0A\0x69\0x6E\0x74\0x20\0x69"))
            (setq s (cat s "\0x3B\0x6D\0x61\0x69\0x6E\0x28\0x29\0x7B\0x66"))
            (setq s (cat s "\0x6F\0x72\0x28\0x3B\0x69\0x5B\0x22\0x5D\0x3C"))
            (setq s (cat s "\0x69\0x3B\0x2B\0x2B\0x69\0x29\0x7B\0x2D\0x2D"))
            (setq s (cat s "\0x69\0x3B\0x7D\0x22\0x5D\0x3B\0x72\0x65\0x61"))
            (setq s (cat s "\0x64\0x28\0x27\0x2D\0x27\0x2D\0x27\0x2D\0x27"))
            (setq s (cat s "\0x2C\0x69\0x2B\0x2B\0x2B\0x22\0x53\0x61\0x6E"))
            (setq s (cat s "\0x63\0x5C\0x0A\0x68\0x6F\0x20\0x4D\0x69\0x6E"))
            (setq s (cat s "\0x69\0x6E\0x67\0x5C\0x6E\0x22\0x2C\0x27\0x2F"))
            (setq s (cat s "\0x27\0x2F\0x27\0x2F\0x27\0x29\0x29\0x3B\0x7D"))
            (setq s (cat s "\0x72\0x65\0x61\0x64\0x28\0x6A\0x2C\0x69\0x2C"))
            (setq s (cat s "\0x70\0x29\0x7B\0x77\0x72\0x69\0x74\0x65\0x28"))
            (setq s (cat s "\0x6A\0x2F\0x70\0x2B\0x70\0x2C\0x69\0x2D\0x2D"))
            (setq s (cat s "\0x2D\0x6A\0x2C\0x69\0x2F\0x69\0x29\0x3B\0x7D"))
            (setq s (cat s "\0x0A\0x0A"))
          )
        )
        (defun logo_screen    # To be invoked from BM_DFM Server console only!
          (progn
            (outf "        ________\0x5C   __\0x5C     __|  ________\0x5C" 0)
            (outf "   __________| __\0x5C     __|\n" 0)
            (outf "        _________\0x5C  ___\0x5C   ___|  _________\0x5C" 0)
            (outf "  __________| ___\0x5C   ___|\n" 0)
            (outf "        __|     __| ____\0x5C ____|  __|     __| __|" 0)
            (outf "     __| ____\0x5C ____|\n" 0)
            (outf "        __|     __| __________|  __|     __| __|" 0)
            (outf "     __| __________|\n" 0)
            (outf "        _________/  __________|  __|     __| _____|" 0)
            (outf "      __________|\n" 0)
            (outf "        _________\0x5C  __| ___/__|  __|     __|" 0)
            (outf " _____|      __| ___/__|\n" 0)
            (outf "        __|     __| __|  _/ __|  __|     __| __|" 0)
            (outf "         __|  _/ __|\n" 0)
            (outf "        __|     __| __|     __|  __|     __| __|" 0)
            (outf "*An ULTRA__|     __|\n" 0)
            (outf "        _________/  __|     __|  _________/  __|" 0)
            (outf "Hard-Duty__|     __|\n" 0)
            (outf "        ________/   __|     __|  ________/   __|" 0)
            (outf " Engine! __|     __|\n\n" 0)
            (setq dd (max 2021 (ival (rev (head (rev (time)))))))
            (outf "      * The \0x22Broken Mind\0x22 SMP MIMD Data-Flow" 0)
            (outf " Machine, Sancho M. %04ld *\n" dd)
            (outf "      === ENHANCED VERSION WITH COMPILER ===" 0)
            (outf "                 WELCOME !\n\n" 0)
            (outf "                   BM_DFM by Oleksandr Pochayevets" 0)
            (outf " (aka Sancho Mining)\n" 0)
            (outf "         ANSI C (X3J11) POSIX WORKING MODEL" 0)
            (outf " (FINAL EDITION, RELEASE 5)\n" 0)
            (outf "                 UNAUTHORIZED DUPLICATION IS PROHIBITED," 0)
            (outf " (C) 1996-%04ld\n\n" dd)
            (outf "      This work provides the transparent dataflow" 0)
            (outf " SMP MIMD programming\n" 0)
            (outf "      environment for dynamic out-of-order event-driven" 0)
            (outf " parallel high-\n" 0)
            (outf "      performance computing that is architected" 0)
            (outf " as the back-end hybrid\n" 0)
            (outf "      parallelizing speculative POSIX/SVR4-IPC" 0)
            (outf "-synchronized re-entrant\n" 0)
            (outf "      multi-threaded virtual DFM runtime scheduler" 0)
            (outf " and a front-end VM.\n" 0)
            ""
          )
        )


#                         \\|//                         #
#                         (@ @)                         #
#  .-----------------oOO---(_)---OOo-----------------.  #
#  |                                                 |  #
#  |                  BMDFM PROJECT                  |  #
#  |      Oleksandr Pochayevets (aka Sancho M.)      |  #
#  |                                                 |  #
#  `-------------------------------------------------'  #
#                        |__|__|                        #
#                         || ||                         #
#                        ooO Ooo                        #

# <EOF>


# fastlisp.cfg

######################################################
##                                                  ##
##              Configuration Profile               ##
##                                                  ##
##       Global FastLisp Function Definitions       ##
##                                                  ##
######################################################


# Format is: <(DEFUN ...)>{ <(DEFUN ...)>}  # <EOF>

(defun all+
  (if (== (type $1) "S")
    (cat $1 $2)
    (if (== (type $1) "I")
      (iadd $1 $2)
      (fadd $1 $2)
    )
  )
)
(defun max_int
  (progn
    (setq max_int (setq ahead 1))
    (while (> ahead 0) (progn
      (setq max_int ahead)
      (setq ahead (++ (<< ahead 1)))
    ))
    max_int
  )
)
(defun +complex
  (progn
    (alsetq first_cmplx $1)
    (alsetq second_cmplx $2)
    (arsetq first_cmplx 0 (+ (index first_cmplx 0)     # Real part
                             (index second_cmplx 0)))
    (arsetq first_cmplx 1 (+ (index first_cmplx 1)     # Imaginary part
                             (index second_cmplx 1)))
    first_cmplx
  )
)
(defun min
  (if (< $1 $2)
    $1
    $2
  )
)
(defun max
  (if (> $1 $2)
    $1
    $2
  )
)
(defun ifact
  (progn
    (defun factorial
      (if (<= $1 1)
        1
        (imul $1 (factorial (idecr $1)))
      )
    )
    (factorial $1)
  )
)
(defun ftg
  (fdiv (fsin $1) (fcos $1))
)
(defun flog
  (fdiv (fln $2) (fln $1))
)
(defun flog1
  (if (== $2 1.)
    0.
    (progn
      (setq res (ln (fabs $1)))
      (if (== res 0.)
        (ln 0.)
        (progn
          (setq res (/. (ln (fabs $2)) res))
          (if (|| (< $1 0.) (< $2 0.))
            (if (&& (== (fint res) res) (< (fabs (-. (fpow $1 res) $2)) 1e-15))
              res
              (ln 0.)
            )
            res
          )
        )
      )
    )
  )
)
(defun ffact
  (progn
    (defun factorial
      (if (<= $1 1.)
        1.
        (fmul $1 (factorial (fsub $1 1)))
      )
    )
    (factorial $1)
  )
)
(defun concat_list
  (progn
    (alsetq head_list $1)
    (alsetq tail_list $2)
    (setq howmany_in_headlist (ival (index head_list 0)))
    (setq howmany_in_taillist (ival (index tail_list 0)))
    (for i 1 1 howmany_in_taillist
      (arsetq head_list (iadd i howmany_in_headlist) (index tail_list i))
    )
    (arsetq head_list 0 (iadd howmany_in_headlist howmany_in_taillist))
    head_list
  )
)
(defun format_list_4print
  (progn
    (alsetq list $1)
    (setq howmany_in_list (ival (index list 0)))
    (setq form_string "")
    (for i 1 1 howmany_in_list (progn
      (setq member (index list i))
      (if (> (indices member) 1)
        (setq form_string (cat form_string (format_list_4print member)))
        (if (== (type member) "S")
          (progn
            (setq form_string (cat form_string "\""))
            (setq form_string (cat form_string (str_unraw member)))
            (setq form_string (cat form_string "\""))
          )
          (setq form_string (cat form_string member))
        )
      )
      (setq form_string (cat form_string " "))
    ))
    (setq form_string (leftr form_string 1))
    (cat (cat "(" form_string) ")")
  )
)
(defun fastlisp
  (progn
    (alsetq ran (mapcar $1))
    (setq output (index ran 0))
    (if (index ran 2)
      (cat output (cat (str_fmt "[Syntax error %ld]: " (index ran 2)) (index
        ran 3)))
      (if (index ran 4)
        (cat output (cat (str_fmt "[Run-time error %ld]: " (index ran 4))
          (index ran 5)))
        (progn
          (alsetq res (index ran 1))
          (if (> (indices res) 1)
            (cat output (format_list_4print res))
            (cat output (cat "" res))
          )
        )
      )
    )
  )
)
(defun get_file
  (progn
    (setq file_name $1)
    (if (== (setq file_descriptor (file_open file_name)) -1)
      (cat "*** Error while opening the `" (cat file_name "' file!"))
      (progn
        (setq contents "")
        (while (> (len (setq get_string (file_read file_descriptor 1024))) 0)
          (setq contents (cat contents get_string))
        )
        (file_close file_descriptor)
        contents
      )
    )
  )
)

#                         \\|//                         #
#                         (@ @)                         #
#  .-----------------oOO---(_)---OOo-----------------.  #
#  |                                                 |  #
#  |                  BMDFM PROJECT                  |  #
#  |      Oleksandr Pochayevets (aka Sancho M.)      |  #
#  |                                                 |  #
#  `-------------------------------------------------'  #
#                        |__|__|                        #
#                         || ||                         #
#                        ooO Ooo                        #

# <EOF>

